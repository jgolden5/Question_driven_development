When a file descriptor points to a file, it means that programs can interact with a file's content using said file as input and/or output depending on the direction of the angle bracket(s) following the exec command and file descriptor number/variable name.
When a fifo reads into itself indefinitely, that actually is not possible, because fifos are by their very name, first-in first-out, which means they are single direction only, unlike a web socket which is full duplex (bidirectional); what this means is that I couldn't possibly run something through a fifo an infinite number of times when the input of one depends on the output of another bidirectionally--only if the direction is fixed.
Fifos in bash are named for first in first out because fifos are made to handle multiple pieces of data and ensure they get sent at the right time.
The difference between sourcing and running a bash script is that running a script runs said script in a new and separate subshell, whereas sourcing a script executes the contents of the script  directly in the current shell environment, meaning all the variables and functions inside the script remain accessible after the script is sourced ('source script.sh' or '. script.sh'), but not simply if the script is run ('./script.sh', 'file/path/script.sh', or 'bash script.sh').
