To pull a docker image means to download said image from a docker registry, which is some place where docker images are stored.
A docker container is an encapsulated environment that can be perfectly replicated regardless of hardware or operating system.
A PID namespace in docker is a way to provide separation of processes.
It might be useful to load an environment variable from a file with docker run because you can create versatile and reusable configurations by being able to easily manipulate environment variables.
Docker-run runs a command in a new container as opposed to some other previously used or existing container because this makes them easier to create exact replicas of containers, without any external dependencies.
Docker-run needs to pull an image if it does not exist locally, and DOES exist on some docker registry like docker hub.
To pull a docker image means to download it to my local computer from some remote server (registry).
A docker container is an independent, easily reproducible environment, whose reproduction does not at all depend on the host computer.
Detached mode means when I run the docker run command that I can continue to use the command line while the docker run process runs my container.
You connect a container to a user-defined bridge network by using docker network create my-bridge-network.
A bridge network in docker is a way to isolate networks from each other by giving them their own name, and only connecting certain intentional containers to said bridge networks.
When you connect a container to a user-defined bridge network, you gain control over a network which can be used for certain deliberate containers, giving the user security and power.
A cidfile in docker run is a flag that tells docker to write the newly created container's id to a specified file.
A PID namespace in docker is an encapsulation of certain process id visibilities, constrained to each namespace, all of which are visible to the host system, and each of which is only visible to the container running said processes.
A namespace is an area in which variable names (and in the latter case, process ids) are able to be seen.
A namespace is synonymous to a scope.
A PID namespace in docker is a namespace represented by a "process id" (PID).
To expose a port in docker means to let an external client connect to something inside of a docker container by connecting port 90 externally to por 80 internally, for example.
Is it true that a docker container does not depend on hardware or operating system, not even Linux? containers share the host's operating system, and do not require an os at the application level, but they do require it from the host.
I load an environment variable from a file with docker run by using the following command = docker run -e ENV_VAR='override_val'.
An environment variable in docker run is a var set to configure runtime behavior of the container.
It IS true that a namespace synonymous to a scope because a namespace is similar to a scope in docker, it just specifically applies to something like PID, network, mount, etc..
It is NOT true that a docker container does not depend on hardware or operating system, not even Linux because docker containers DO depend upon Linux.
It IS true that a namespace is synonymous to a scope because in the context of docker a namespace is similar to a scope, but namespaces are more docker-specific, whereas scope is a very generic term.
Docker run -t flag allocates a pseudo-tty (teletypewriter) to the container, which connects my terminal to the i/o streams of the container, allowing me to interact anormally with containers that expect a terminal environment.
